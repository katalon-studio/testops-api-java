/*
 * Katalon TestOps API reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.katalon.testops.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * TimeZoneResourceOffsetRulesTransitionRules
 */
@JsonPropertyOrder({
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_MONTH,
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_TIME_DEFINITION,
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_DAY_OF_WEEK,
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_DAY_OF_MONTH_INDICATOR,
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_MIDNIGHT_END_OF_DAY,
  TimeZoneResourceOffsetRulesTransitionRules.JSON_PROPERTY_LOCAL_TIME
})
@JsonTypeName("TimeZoneResource_offset_rules_transitionRules")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TimeZoneResourceOffsetRulesTransitionRules implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets month
   */
  public enum MonthEnum {
    JANUARY("JANUARY"),
    
    FEBRUARY("FEBRUARY"),
    
    MARCH("MARCH"),
    
    APRIL("APRIL"),
    
    MAY("MAY"),
    
    JUNE("JUNE"),
    
    JULY("JULY"),
    
    AUGUST("AUGUST"),
    
    SEPTEMBER("SEPTEMBER"),
    
    OCTOBER("OCTOBER"),
    
    NOVEMBER("NOVEMBER"),
    
    DECEMBER("DECEMBER");

    private String value;

    MonthEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MonthEnum fromValue(String value) {
      for (MonthEnum b : MonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MONTH = "month";
  private MonthEnum month;

  /**
   * Gets or Sets timeDefinition
   */
  public enum TimeDefinitionEnum {
    UTC("UTC"),
    
    WALL("WALL"),
    
    STANDARD("STANDARD");

    private String value;

    TimeDefinitionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeDefinitionEnum fromValue(String value) {
      for (TimeDefinitionEnum b : TimeDefinitionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TIME_DEFINITION = "timeDefinition";
  private TimeDefinitionEnum timeDefinition;

  /**
   * Gets or Sets dayOfWeek
   */
  public enum DayOfWeekEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DAY_OF_WEEK = "dayOfWeek";
  private DayOfWeekEnum dayOfWeek;

  public static final String JSON_PROPERTY_DAY_OF_MONTH_INDICATOR = "dayOfMonthIndicator";
  private Integer dayOfMonthIndicator;

  public static final String JSON_PROPERTY_MIDNIGHT_END_OF_DAY = "midnightEndOfDay";
  private Boolean midnightEndOfDay;

  public static final String JSON_PROPERTY_LOCAL_TIME = "localTime";
  private org.joda.time.* localTime;


  public TimeZoneResourceOffsetRulesTransitionRules month(MonthEnum month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MonthEnum getMonth() {
    return month;
  }


  public void setMonth(MonthEnum month) {
    this.month = month;
  }


  public TimeZoneResourceOffsetRulesTransitionRules timeDefinition(TimeDefinitionEnum timeDefinition) {
    
    this.timeDefinition = timeDefinition;
    return this;
  }

   /**
   * Get timeDefinition
   * @return timeDefinition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TIME_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TimeDefinitionEnum getTimeDefinition() {
    return timeDefinition;
  }


  public void setTimeDefinition(TimeDefinitionEnum timeDefinition) {
    this.timeDefinition = timeDefinition;
  }


  public TimeZoneResourceOffsetRulesTransitionRules dayOfWeek(DayOfWeekEnum dayOfWeek) {
    
    this.dayOfWeek = dayOfWeek;
    return this;
  }

   /**
   * Get dayOfWeek
   * @return dayOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DAY_OF_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }


  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public TimeZoneResourceOffsetRulesTransitionRules dayOfMonthIndicator(Integer dayOfMonthIndicator) {
    
    this.dayOfMonthIndicator = dayOfMonthIndicator;
    return this;
  }

   /**
   * Get dayOfMonthIndicator
   * @return dayOfMonthIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DAY_OF_MONTH_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDayOfMonthIndicator() {
    return dayOfMonthIndicator;
  }


  public void setDayOfMonthIndicator(Integer dayOfMonthIndicator) {
    this.dayOfMonthIndicator = dayOfMonthIndicator;
  }


  public TimeZoneResourceOffsetRulesTransitionRules midnightEndOfDay(Boolean midnightEndOfDay) {
    
    this.midnightEndOfDay = midnightEndOfDay;
    return this;
  }

   /**
   * Get midnightEndOfDay
   * @return midnightEndOfDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MIDNIGHT_END_OF_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMidnightEndOfDay() {
    return midnightEndOfDay;
  }


  public void setMidnightEndOfDay(Boolean midnightEndOfDay) {
    this.midnightEndOfDay = midnightEndOfDay;
  }


  public TimeZoneResourceOffsetRulesTransitionRules localTime(org.joda.time.* localTime) {
    
    this.localTime = localTime;
    return this;
  }

   /**
   * Get localTime
   * @return localTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOCAL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public org.joda.time.* getLocalTime() {
    return localTime;
  }


  public void setLocalTime(org.joda.time.* localTime) {
    this.localTime = localTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeZoneResourceOffsetRulesTransitionRules timeZoneResourceOffsetRulesTransitionRules = (TimeZoneResourceOffsetRulesTransitionRules) o;
    return Objects.equals(this.month, timeZoneResourceOffsetRulesTransitionRules.month) &&
        Objects.equals(this.timeDefinition, timeZoneResourceOffsetRulesTransitionRules.timeDefinition) &&
        Objects.equals(this.dayOfWeek, timeZoneResourceOffsetRulesTransitionRules.dayOfWeek) &&
        Objects.equals(this.dayOfMonthIndicator, timeZoneResourceOffsetRulesTransitionRules.dayOfMonthIndicator) &&
        Objects.equals(this.midnightEndOfDay, timeZoneResourceOffsetRulesTransitionRules.midnightEndOfDay) &&
        Objects.equals(this.localTime, timeZoneResourceOffsetRulesTransitionRules.localTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, timeDefinition, dayOfWeek, dayOfMonthIndicator, midnightEndOfDay, localTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeZoneResourceOffsetRulesTransitionRules {\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    timeDefinition: ").append(toIndentedString(timeDefinition)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    dayOfMonthIndicator: ").append(toIndentedString(dayOfMonthIndicator)).append("\n");
    sb.append("    midnightEndOfDay: ").append(toIndentedString(midnightEndOfDay)).append("\n");
    sb.append("    localTime: ").append(toIndentedString(localTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

