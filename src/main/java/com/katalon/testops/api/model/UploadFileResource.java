/*
 * Katalon TestOps API reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.katalon.testops.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * UploadFileResource
 */
@JsonPropertyOrder({
  UploadFileResource.JSON_PROPERTY_PATH,
  UploadFileResource.JSON_PROPERTY_FILE_NAME,
  UploadFileResource.JSON_PROPERTY_TYPE,
  UploadFileResource.JSON_PROPERTY_BASE64_CONTENT,
  UploadFileResource.JSON_PROPERTY_FILE_HANDLE_ID
})
@JsonTypeName("UploadFileResource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UploadFileResource implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    TSC_EXECUTION("TSC_EXECUTION"),
    
    TS_EXECUTION("TS_EXECUTION"),
    
    ATTACHMENT("ATTACHMENT"),
    
    PROPERTIES("PROPERTIES"),
    
    HAR("HAR"),
    
    UUID("UUID"),
    
    ZIP("ZIP"),
    
    BDD("BDD"),
    
    TESTOPS_REPORT_METADATA("TESTOPS_REPORT_METADATA"),
    
    TESTOPS_REPORT_EXECUTION("TESTOPS_REPORT_EXECUTION"),
    
    TESTOPS_REPORT_TESTSUITE("TESTOPS_REPORT_TESTSUITE"),
    
    TESTOPS_REPORT_TESTCASE("TESTOPS_REPORT_TESTCASE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_BASE64_CONTENT = "base64Content";
  private String base64Content;

  public static final String JSON_PROPERTY_FILE_HANDLE_ID = "fileHandleId";
  private Long fileHandleId;


  public UploadFileResource path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public UploadFileResource fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public UploadFileResource type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UploadFileResource base64Content(String base64Content) {
    
    this.base64Content = base64Content;
    return this;
  }

   /**
   * Get base64Content
   * @return base64Content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BASE64_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBase64Content() {
    return base64Content;
  }


  public void setBase64Content(String base64Content) {
    this.base64Content = base64Content;
  }


  public UploadFileResource fileHandleId(Long fileHandleId) {
    
    this.fileHandleId = fileHandleId;
    return this;
  }

   /**
   * Get fileHandleId
   * @return fileHandleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILE_HANDLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileHandleId() {
    return fileHandleId;
  }


  public void setFileHandleId(Long fileHandleId) {
    this.fileHandleId = fileHandleId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadFileResource uploadFileResource = (UploadFileResource) o;
    return Objects.equals(this.path, uploadFileResource.path) &&
        Objects.equals(this.fileName, uploadFileResource.fileName) &&
        Objects.equals(this.type, uploadFileResource.type) &&
        Objects.equals(this.base64Content, uploadFileResource.base64Content) &&
        Objects.equals(this.fileHandleId, uploadFileResource.fileHandleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, fileName, type, base64Content, fileHandleId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadFileResource {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    base64Content: ").append(toIndentedString(base64Content)).append("\n");
    sb.append("    fileHandleId: ").append(toIndentedString(fileHandleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

